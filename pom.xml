<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>net.orpiske</groupId>
    <artifactId>mdm-types</artifactId>
    <version>1.0.0-SNAPSHOT</version>


    <properties>
        <cxf.version>2.7.10</cxf.version>
    </properties>

    <build>

        <resources>
            <!--
            This embeds the WSDLs files within src/resources into the jar
            -->
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>

            <!--
            This embeds the generated source code into the jar. You'll need it
            to ease your debugging
            -->
            <resource>
                <directory>${project.build.directory}/generated-sources</directory>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <!-- Here, we declare the plugin used to generate our DTOs from
                    the WSDLs (and XSDs, if included/referenced) files
                -->
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-codegen-plugin</artifactId>
                <version>${cxf.version}</version>
                <executions>
                    <execution>
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <sourceRoot>${project.build.directory}/generated-sources</sourceRoot>
                            <wsdlOptions>
                                <wsdlOption>
                                    <wsdl>${basedir}/src/main/resources/wsdl/load/v1/loadservice.wsdl</wsdl>
                                </wsdlOption>
                                <!-- If you have other WSDLs, just add them here -->
                            </wsdlOptions>
                        </configuration>
                        <goals>
                            <goal>wsdl2java</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>

            <!--
                Technically, this is not needed ... but since the WSDLs
                are embedded into the jar file, we may want to deliver a
                separate file with only the WSDLs and schemas. This is the code
                that creates them.
            -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>
                            src/main/assembly/web-resources.xml
                        </descriptor>
                    </descriptors>
                    <appendAssemblyId>true</appendAssemblyId>
                </configuration>

                <executions>
                    <execution>
                        <id>wsdl-files</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assembly</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>